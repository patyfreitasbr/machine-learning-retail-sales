# -*- coding: utf-8 -*-
"""ml-supernakert-sales.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xqJTlE7-p8IyQ3mj5L1qi-sLd3kqSxVq
"""



"""1.Escolher um algoritmo = random forest
2. criar os testes
3. acuria (porcentagem do resultado)

importação das bibliotecas
"""

import pandas as pd

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

"""teste de leitura de dataset de  exemplo"""

df = pd.read_csv("/content/sample_data/california_housing_train.csv")
display(df)

df = pd.read_csv("/content/supermarket_sales-Sheet1.csv")
display(df)

"""limpeza dos dados

"""

df['Gender'] = df['Gender'].apply(lambda x: 1 if x == 'Female' else 0)  # convertendo gênero para binário
df['Customer type'] = df['Customer type'].replace({'Member': 1, 'Normal': 0})  # convertendo tipo de cliente para binário

display(df)

"""Ajustar as feactures - devem ser numericas"""

# Ajustando as features para apenas variáveis numéricas

features_simplified = df[['Unit price', 'Customer type']]
target = df['Gender']

display(features_simplified)

"""dividir o dataset (dados)"""

# divisao do dataset

X_train_simplified, X_teste_simplified, Y_train, Y_test = train_test_split(features_simplified,  target, test_size=0.2, random_state=42)

"""treinar o modelo - randon florest"""

# treinando modelo
model_simplified = RandomForestClassifier(n_estimators=100, random_state=42)
model_simplified.fit(X_train_simplified, Y_train )

"""Acuria dos dados"""

# fazendo a redição/previsão de dados

y_pred_simplified = model_simplified.predict(X_teste_simplified)

"""Calcular a acuria - fazendoa  comparaçãod os dados preditos na função gerada com os dados Y de teste"""

accuracy_simplified = accuracy_score(Y_test, y_pred_simplified)

print(f"Simplified Model Accuracy: {accuracy_simplified:.2f}")

"""Conclusão: pocentagem baixa testar mais features, so foram testadas 2

Aplicação do seu treino
"""

def get_user_input_and_predict(model):
    # Solicitando os dados do usuário
    print("Digite os dados para previsão de compra:")
    unit_price = float(input("Preço Unitário do Produto: "))
    customer_type = input("O cliente é membro? (sim/não): ")
    customer_type = 1 if customer_type.lower() == 'sim' else 0

    # Criando o DataFrame com os dados de entrada
    new_data = pd.DataFrame({
        'Unit price': [unit_price],
        'Customer type': [customer_type]
    })

    # Usando o modelo para prever a probabilidade de compra por mulheres
    probability = model.predict_proba(new_data)[:, 1][0]  # Probabilidade de compra por mulheres

    # Calculando a probabilidade de compra por homens
    probability_male = 1 - probability

    # Exibindo o resultado
    print(f"Probabilidade de compra por mulheres: {probability * 100:.2f}%")
    print(f"Probabilidade de compra por homens: {probability_male * 100:.2f}%")

# chamando a função para testar

get_user_input_and_predict(model_simplified)